import sys
import os
import argparse
import array
from Crypto import Random
from Crypto.Cipher import AES
import base64
import hashlib
import time
from pyfiglet import Figlet


custom_fig = Figlet(font='graffiti')
print(custom_fig.renderText('Kayiz'))
print ("""
Usage: -f: files input (Can add multi files)
       -t: compress or compress
Notice: The output exe file will be stored in folder "dist"
	""")
parser = argparse.ArgumentParser(description='Kayiz PE file Packer')
parser.add_argument('--type','-t',help='Type of function', dest='type')
parser.add_argument('--file','-f',help='Input file', dest='file',nargs='+')
args = parser.parse_args()

count = 0
data = []
mode = args.type
f = args.file
key = '123456789'
key_encode = key.encode()
key_ori = hashlib.sha256(key_encode).digest()

def pad(s):
    return s + b"\0" * (AES.block_size - len(s) % AES.block_size)
def encrypt(message, key, key_size=256):
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)
def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b"\0")
# Read two files as byte arrays
if mode=='compress':
	def Readfile(filename):
		with open(filename,"rb") as f:
		        content = f.read()
		content = base64.b64encode(content)
		enc = encrypt(content, key_ori)
		data.__iadd__([filename])
		data.__iadd__([enc.hex()])
		print('***Extracting the file:' + filename)
		os.remove(filename)
	for i in f:
		Readfile(i)
	textfile = open("output.txt", "w")
	for element in data:
		textfile.write(element + "\n")
	textfile.close()
	print('Injected encypt!')
	os.system("attrib +h output.txt")
	os.system('cmd /c "pyinstaller --onefile Packer.py"')
else:
	index = 0
	lines = []
	with open('../output.txt') as f:
		lines = f.read().splitlines()

	count = 0
	for line in lines:
		count += 1
		data.__iadd__([line])
	print(count)
	while index <= (count+1/2):
		print ("[+] Writting into " + data[index])
		with open(data[index],"wb") as f:
			hex_data = data[index+1]
			byte_data = bytearray.fromhex(hex_data)
			dec = decrypt(byte_data, key_ori)
			dec = base64.b64decode(dec)
			data_current = dec
			f.write(data_current)
		index +=2
for remaining in range(5, 0, -1):
    sys.stdout.write("\r")
    sys.stdout.write("{:2d} seconds remaining.".format(remaining))
    sys.stdout.flush()
    time.sleep(1)

sys.stdout.write("\rComplete!            \n")